-- Ej 1:
tad Lista (a : Set) where
  import bool
  nil :: Lista a
  cons :: a -> Lista a -> Lista a
  null :: Lista a -> Bool
  head :: Lista a -> a
  tail :: Lista a -> Lista a

-- a)
null nil = True
null (cons x l) = False
head (cons x l) = x
tail (cons x l) = l

-- b)
null <x_1,...,x_n> = True si n = 0
null <x_1,...,x_n> = False en otro caso
head <x_1,...,x_n> = x_1
tail <x_1,x_2,...,x_n> = <x_2,...x_n>

-- c)
inL :: Lista a -> a -> Bool
inL nil x = False
inL (cons x xs) y = if x == y then True else inL xs y

-- d)
del :: Lista a -> a -> Lista a
del nil x = nil
del (cons x xs) y = if x == y then del xs y else cons x (del xs y)

-- ----------------------------------------------------------------------------

-- Ej 2:
tad Pila (a : Set) where
  import Bool
  empty :: Pila a
  push :: a -> Pila a -> Pila a
  isEmpty :: Pila a -> Bool
  top :: Pila a -> a
  pop :: Pila a -> Pila a

-- Especificación algebraica:
isEmpty empty = True
isEmpty (push x s) = False
top (push x s) = x
pop (push x s) = s

-- Especificación tomando como modelo las secuencias:
isEmpty <x_1,...,x_n> = True si n = 0
isEmpty <x_1,...,x_n> = False en otro caso
top <x_1,...,x_n> = x_1
pop <x_1,x_2,...,x_n> = <x_2,...,x_n>

-- ----------------------------------------------------------------------------

-- Ej 3:
tad Conjunto (a : Set) where
  import Bool
  vacio :: Conjunto a
  insertar :: a -> Conjunto a -> Conjunto a
  borrar :: a -> Conjunto a -> Conjunto a
  esVacio :: Conjunto a -> Bool
  union :: Conjunto a -> Conjunto a -> Conjunto a
  enConj :: a -> Conjunto a -> Bool
  intersección :: Conjunto a -> Conjunto a -> Conjunto a
  resta :: Conjunto a -> Conjunto a -> Conjunto a

-- Especificación algebraica:
insertar x (insertar x c) = insertar x c
insertar x (insertar y c) = insertar y (insertar x c)

borrar x vacio = vacio
borrar x (insertar y c) = if x == y then c else insertar y (borrar x c)

esVacio vacio = True
esVacio (insertar x c) = False

union c vacio = c
union c (insertar x c') = union (insertar x c) c'

enConj x vacio = False
enConj x (insertar y c) = if x == y then True else enConj x c

interseccion c vacio = c
interseccion c (insertar x c') = if enConj x c 
                                  then interseccion (insertar x c) c'
                                  else interseccion c c'

resta c vacio = c
resta c (insertar x c') = if enConj x c 
                          then interseccion (borrar x c) c'
                          else interseccion c c'

----------------------------------------------------------------------------

-- Ej 4:
tad PriorityQ (a : Set) where
  import Bool
  vacia :: PriorityQ a
  poner :: a -> N -> PriorityQ a -> PriorityQ a
  primero :: PriorityQ a -> a
  sacar :: PriorityQ a -> PriorityQ a
  esVacia :: PriorityQ a -> Bool
  union :: PriorityQ a -> PriorityQ a -> PriorityQ a

-- Especificación algebraica:
poner x p (poner y p c) = poner x p c
poner x p (poner y q c) = poner y q (poner x p c)

primero (poner x p vacia) = x
primero (poner x p (poner y q c)) = if x > y then primero (poner x p c)
                                             else primero (poner y q c)

sacar (poner x p vacia) = vacia
sacar (poner x p (poner y q c)) = if p > q then poner y q (sacar (poner x p c))
                                           else poner x p (sacar (poner y q c))

esVacia vacia = True
esVacia (poner x p q) = False

union c vacia = c
union c (poner x p q) = union (poner x p c) q

-- Especificación tomando como modelo los conjuntos:
primero {(x_1,p_1),...,(x_n,p_n)} = (x_i,p_i) tal que p_i = max{p_1,...,p_n}
sacar A = A - {(x_i, p_i) e A / p_i = max{p_1,...,p_n}}
esVacia {(x_1,p_1),...,(x_n,p_n)} = True si n = 0
esVacia {(x_1,p_1),...,(x_n,p_n)} = False en otro caso
union A B = A U {(x_i,p_i) / x_i e B y x_i /e A, i = 1,..,#B}

----------------------------------------------------------------------------

-- Ej 5:
tad BalT (a : Ordered Set) where
  import Maybe
  empty :: Balt a
  join :: BalT a -> Maybe a -> BalT a -> BalT a
  size :: BalT a -> N
  expose :: BalT a -> Maybe (BalT a, a, BalT a)

size empty = 0
size (join l x r) = 1 + size l + size r

expose empty = Nothing
expose (join l x r) = undefined

----------------------------------------------------------------------------

-- Ej 6:
Demostrar (uncurry zip) . unzip = id

uncurry :: (a -> b -> c) -> ((a, b) -> c)

zip :: [a] -> [b] -> [(a, b)]
zip [] ys = []
zip (x:xs) [] = []
zip (x:xs) (y:ys) = (x, y) : zip xs ys

uncurry zip :: ([a], [b]) -> [(a, b)]
uncurry zip ([], ys) = []
uncurry zip ((x:xs), []) = []
uncurry zip ((x:xs), (y:ys)) = (x, y) : uncurry zip (xs, ys)

unzip :: [(a,b)] -> ([a], [b])
unzip [] = ([], [])
unzip ((x, y) : ps) = (x : xs, y : ys) where (xs, ys) = unzip ps

Tipo de datos de listas definido en el preludio:
data [] a = [] | a : [a]

Voy a demostrar por inducción estructural sobre listas, defino el principio:
Dada una propiedad P sobre [], para probar ∀ xs :: []. P(xs):

- Probamos P([])
- Probamos que si P(xs) entonces P(x : xs)

Y sea la propiedad P(l): (uncurry zip) . unzip = id

- Caso base, xs = []
(uncurry zip) . unzip [] =_{unzip.1} (uncurry zip) ([], []) =_{uncurry zip.1} = []

- Supongo que vale P(ps), quiero ver que vale para x:ps donde x = (a, b)
HI: (uncurry zip) . unzip ps = ps

(uncurry zip) . unzip (x : ps) = (uncurry zip) . unzip (a, b) : ps =
(uncurry zip) (a : xs, b : ys) where (xs, ys) = unzip ps
=  (a, b) : uncurry zip (xs, ys) where (xs, ys) = unzip ps
= (a, b) : uncurry zip . unzip ps = (a, b) : ps

----------------------------------------------------------------------------

-- Ej 7:
Tipo de datos de listas definido en el preludio:
data [] a = [] | a : [a]

Principio de inducción estructural sobre listas:
Dada una propiedad P sobre [], para probar ∀ xs :: []. P(xs):

- Probamos P([])
- Probamos que si P(xs) entonces P(x : xs)

maxl [] = 0
maxl (x:xs) = x `max` maxl xs

sum [] = 0
sum (x:xs) = x + sum xs

Sea la propiedad P(xs): sum xs <= length xs * maxl xs

- Caso base, xs = []
sum xs = 0 <= 0 = maxl [] * length xs

- Supongo que vale P(xs), quiero ver que vale para x : xs.
HI: sum xs <= length xs * maxl xs

Quiero ver sum (x:xs) <= length (x:xs) * maxl (x:xs)

sum (x : xs) = x + sum xs <= x + length xs * maxl xs
<= x 'max' maxl xs + length xs * x 'max' maxl xs
= (1 + length xs) * x 'max' maxl xs = length (x:xs) * maxl (x:xs)

----------------------------------------------------------------------------

-- Ej 8:

data Arbol a = Hoja a | Nodo a (Arbol a) (Arbol a)

-- a)
size :: Arbol a -> Int
size (Hoja x) = 1
size (Nodo x l r) = 1 + size l + size r

-- b)
Principio de inducción estructural sobre árboles binarios:

- Probamos P(Hoja x)
- Probamos que si P(l) y P(r) entonces P(Nodo x l r)

Sea la propiedad P(t) = existe k e N / size t = 2k + 1

- Caso base, t = Hoja x
size (Hoja x) = {size.1}
1 = 2.0 + 1 -> k = 0

- Caso inductivo, t  = (Nodo x l r)
HI1: size l = 2m + 1
HI2: size r = 2n + 1

size (Nodo x l r) = {size.2}
1 + size l + size r = {HI1 y HI2}
1 + (2m + 1) + (2n + 1) =
3 + 2m +2n =
2 * (m + n +1) + 1 -> k = m+n+1

-- c)
mirror :: Arbol a -> Arbol a
mirror (Hoja x) = Hoja x
mirror (Nodo x l r) = Nodo x (mirror r) (mirror l)

-- d)
Sea la propiedad P(t): mirror . mirror t = t

- Caso base, t = Hoja x
mirror . mirror (Hoja x) = {mirror.1}
mirror . Hoja x = {mirror.1}
Hoja x

- Caso inductivo, t = (Nodo x l r)
H1: mirror . mirror l = l
H2: mirror . mirror r = r

mirror . mirror (Nodo x l r) = {mirror.2}
mirror Nodo x (mirror r) (mirror l) = {mirror.2}
Nodo x (mirror . mirror l) (mirror . mirror r) = {H1 y H2}
Nodo x l r


-- e)
hojas :: Arbol a -> Int
hojas (Hoja x) = 1
hojas (Nodo x l r) = hojas l + hojas r

altura :: Arbol a -> Int
altura (Hoja x) = 1
altura (Nodo x l r) = 1 + (altura l `max` altura r)

Sea P la propiedad P(t): hojas t < 2^(altura t)

- Caso base, t = Hoja x
hojas (Hoja x) = {hojas.1}
1 = {altura.1}
altura (Hoja x)

- Caso inductivo, t = (Nodo x l r)
HI1: hojas l < 2^(altura l)
HI2: hojas r < 2^(altura r)

hojas (Nodo x l r) = {hojas.2}
hojas l + hojas r < {H1 y H2}
2^(altura l) +  2^(altura r) <=
2^(altura l `max` altura r) +  2^(altura l `max` altura r) =
2 * 2^(altura l `max` altura r) =
2^(1 + altura l `max` altura r) = {altura.2}
2^(altura (Nodo x l r))